/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.robertob.p2ipc1.frames;

import com.robertob.p2ipc1.engine.Simulation;
import com.robertob.p2ipc1.engine.DisembarkStation;
import com.robertob.p2ipc1.engine.Plane;
import com.robertob.p2ipc1.utils.list.DoubleLinkedListException;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author robertob
 */
public class DisembarkingStationsInternalFrame extends javax.swing.JInternalFrame {
    
    Simulation currentSimulation;
    
    public DisembarkingStationsInternalFrame() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        disembarkStationsTable = new javax.swing.JTable();
        disembarkStationSelector = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setResizable(true);

        jLabel1.setFont(new java.awt.Font("Open Sans", 1, 21)); // NOI18N
        jLabel1.setText("ESTACIONES DE DESABORDAJE");

        disembarkStationsTable.setFont(new java.awt.Font("Noto Serif", 0, 20)); // NOI18N
        disembarkStationsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "ID Avion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        disembarkStationsTable.setRowHeight(50);
        disembarkStationsTable.setShowGrid(true);
        jScrollPane1.setViewportView(disembarkStationsTable);

        disembarkStationSelector.setFont(new java.awt.Font("Open Sans", 0, 17)); // NOI18N
        disembarkStationSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disembarkStationSelectorActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Open Sans", 0, 13)); // NOI18N
        jLabel2.setText("Ver pista:");

        jButton1.setFont(new java.awt.Font("Open Sans", 1, 10)); // NOI18N
        jButton1.setText("Actualizar");
        jButton1.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(disembarkStationSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(15, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(disembarkStationSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void disembarkStationSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disembarkStationSelectorActionPerformed
        try {
            updateDisembarkStationTable();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_disembarkStationSelectorActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        updateDisembarkStationSelector();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void updateDisembarkStationSelector() {
        disembarkStationSelector.removeAllItems();
        try {
            for (int i = 0; i < this.currentSimulation.getDisembarkStations().length(); i++) {
                disembarkStationSelector.addItem(String.valueOf(this.currentSimulation.getDisembarkStations().get(i).getId()));
            }
        } catch (Exception e) {
        }
    }
    
    private void updateDisembarkStationTable() throws DoubleLinkedListException {
        DefaultTableModel disembarkDefaultTableModel = (DefaultTableModel)this.disembarkStationsTable.getModel();
        DisembarkStation disembarkStationToShow = null;
        disembarkStationToShow = this.currentSimulation.getDisembarkStationById(Integer.parseInt((String)this.disembarkStationSelector.getSelectedItem()));
        disembarkDefaultTableModel.setRowCount(0);
        for (int i = 0; i < disembarkStationToShow.getPlanesOnDisembarkQueue().length(); i++) {
            if ((disembarkStationToShow.getPlanesOnDisembarkQueue().get(i).getPlaneState() == Plane.PLANE_STATE.ON_DISEMBARK)
                ||(disembarkStationToShow.getPlanesOnDisembarkQueue().get(i).getPlaneState() == Plane.PLANE_STATE.WAITING_DISEMBARK)) {
                disembarkDefaultTableModel.addRow(disembarkStationToShow.getPlanesOnDisembarkQueue().get(i).toAlternateTableFormat());
            }
            
        }
    }
        
    public JTable getDisembarkStationsTable() {
        return disembarkStationsTable;
    }

    public void setCurrentSimulation(Simulation currentSimulation) {
        this.currentSimulation = currentSimulation;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> disembarkStationSelector;
    private javax.swing.JTable disembarkStationsTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables


    
}
